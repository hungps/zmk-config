/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&sk {
    release-after-ms = <900>;
    quick-release;
};

&sl { ignore-modifiers; };

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;
};

/ {
    combos {
        compatible = "zmk,combos";

        capsword {
            bindings = <&caps_word>;
            key-positions = <16 19>;
            layers = <0>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
        };

        toggle_gam {
            bindings = <&tog 1>;
            key-positions = <37 40>;
            layers = <0 1>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
        };

        lpar_lt {
            bindings = <&lpar_lt>;
            key-positions = <19 20>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        rpar_gt {
            bindings = <&rpar_gt>;
            key-positions = <20 21>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        lbkt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <31 32>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        rbkt {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <32 33>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        and_or {
            bindings = <&and_or>;
            key-positions = <18 19>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        start_end {
            bindings = <&start_end>;
            key-positions = <6 7>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        minus_under {
            bindings = <&minus_under>;
            key-positions = <30 31>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <2 3>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <14 15>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <3 4>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <15 16>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        grave_percent {
            bindings = <&grave_percent>;
            key-positions = <4 5>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <16 17>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <28 29>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <6 7>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <21 22>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <33 34>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 7>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <8 9>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <13 14>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        undo {
            bindings = <&kp LG(Z)>;
            key-positions = <25 26>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        copy {
            bindings = <&copy_cut>;
            key-positions = <26 27>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <27 28>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <9 10>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "Home row mod (left hand)";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 36 37 38 39 40 41>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "Home row mod (right hand)";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
            hold-trigger-on-release;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mo_repeat: mo_repeat {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_REPEAT";
            bindings = <&mo>, <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
        };

        hmls: hmls {
            compatible = "zmk,behavior-hold-tap";
            label = "Home row mod (shift only, left hand)";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 36 37 38 39 40 41>;
        };

        hmrs: hmrs {
            compatible = "zmk,behavior-hold-tap";
            label = "Home row mod (shift only, right hand)";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
        };

        lpar_lt: lpar_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_LT";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpar_gt: rpar_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "RPAR_GT";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        copy_cut: copy_cut {
            compatible = "zmk,behavior-tap-dance";
            label = "COPY_CUT";
            #binding-cells = <0>;
            bindings = <&kp LG(C)>, <&kp LG(X)>;
        };

        start_end: start_end {
            compatible = "zmk,behavior-mod-morph";
            label = "START_END";
            bindings = <&kp CARET>, <&kp DOLLAR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        minus_under: minus_under {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUS_UNDER";
            bindings = <&kp MINUS>, <&kp UNDER>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        and_or: and_or {
            compatible = "zmk,behavior-mod-morph";
            label = "AND_OR";
            bindings = <&kp AMPERSAND>, <&kp PIPE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        quote: quote {
            compatible = "zmk,behavior-tap-dance";
            label = "QUOTE";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE>, <&kp DOUBLE_QUOTES>;
        };

        grave_percent: grave_percent {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_PERCENT";
            bindings = <&kp GRAVE>, <&kp PERCENT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        arrow: arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "ARROW";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        def {
            label = "def";
            bindings = <
&trans  &kp Q         &kp W        &kp F        &kp P           &kp B             &kp J      &kp L            &kp U           &kp Y        &kp SINGLE_QUOTE  &trans
&trans  &hml LCTRL A  &hml LALT R  &hml LGUI S  &hmls LSHIFT T  &kp G             &kp M      &hmrs RSHFT N    &hmr RGUI E     &hmr RALT I  &hmr RCTRL O      &trans
&trans  &kp Z         &kp X        &kp C        &kp D           &kp V             &kp K      &kp H            &comma_semi     &dot_colon   &kp SLASH         &trans
                                   &lt 2 ESC    &lt 3 SPACE     &mt LSHIFT TAB    &kp ENTER  &lt 4 BACKSPACE  &mo_repeat 5 0
            >;
        };

        gam {
            label = "gam";
            bindings = <
&trans  &kp Q  &kp W  &kp E    &kp R      &kp T      &kp Y      &kp U          &kp I     &kp O      &kp P  &trans
&trans  &kp A  &kp S  &kp D    &kp F      &kp G      &kp H      &kp J          &kp UP    &kp L      &kp K  &trans
&trans  &kp Z  &kp X  &kp C    &kp V      &kp B      &kp M      &kp LEFT       &kp DOWN  &kp RIGHT  &kp N  &trans
                      &kp ESC  &kp SPACE  &kp TAB    &kp ENTER  &kp BACKSPACE  &none
            >;
        };

        nav {
            label = "nav";
            bindings = <
&trans  &none      &none     &none     &none       &none     &kp C_PREV      &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT       &kp C_PLAY_PAUSE  &trans
&trans  &sk LCTRL  &sk LALT  &sk LGUI  &sk LSHIFT  &none     &kp LEFT        &kp DOWN           &kp UP           &kp RIGHT        &msc SCRL_UP      &trans
&trans  &none      &none     &none     &none       &none     &mmv MOVE_LEFT  &mmv MOVE_DOWN     &mmv MOVE_UP     &mmv MOVE_RIGHT  &msc SCRL_DOWN    &trans
                             &none     &trans      &trans    &mkp LCLK       &mkp RCLK          &mkp MCLK
            >;
        };

        num {
            label = "num";
            bindings = <
&trans  &none      &none     &none     &none      &none     &kp PLUS   &kp N7   &kp N8  &kp N9  &kp ASTERISK  &trans
&trans  &sk LCTRL  &sk LALT  &sk LGUI  &sk LSHFT  &none     &kp MINUS  &kp N4   &kp N5  &kp N6  &kp FSLH      &trans
&trans  &none      &none     &none     &none      &none     &kp COMMA  &kp N1   &kp N2  &kp N3  &kp PERCENT   &trans
                             &trans    &none      &trans    &kp EQUAL  &kp DOT  &kp N0
            >;
        };

        sym {
            label = "sym";
            bindings = <
&trans  &kp LESS_THAN  &kp LEFT_BRACE  &kp LBKT         &kp LEFT_PARENTHESIS  &kp CARET      &kp DOLLAR  &kp RIGHT_PARENTHESIS  &kp RBKT  &kp RIGHT_BRACE  &kp GREATER_THAN  &trans
&trans  &kp AMPERSAND  &kp PIPE        &kp EXCLAMATION  &kp QUESTION          &kp COLON      &kp TILDE   &sk RSHFT              &sk RGUI  &sk RALT         &sk RCTRL         &trans
&trans  &kp PLUS       &kp MINUS       &kp ASTERISK     &kp SLASH             &kp PERCENT    &kp GRAVE   &kp UNDER              &kp AT    &kp HASH         &kp BSLH          &trans
                                       &trans           &trans                &trans         &trans      &none                  &trans
            >;
        };

        sys {
            label = "sys";
            bindings = <
&none  &kp LC(LG(Q))  &none         &none         &none         &none           &none   &none      &none     &none     &none      &none
&none  &bt BT_CLR     &none         &none         &none         &none           &none   &sk RSHFT  &sk RGUI  &sk RALT  &sk RCTRL  &none
&none  &bt BT_SEL 4   &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0    &none   &none      &none     &none     &none      &none
                                    &trans        &none         &trans          &trans  &none      &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
