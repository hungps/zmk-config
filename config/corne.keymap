/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    require-prior-idle-ms = <150>;
    hold-trigger-on-release;
    tapping-term-ms = <280>;
    hold-trigger-key-positions = <13 14 15 16 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
    quick-tap-ms = <175>;
};

/ {
    combos {
        compatible = "zmk,combos";

        select-all {
            bindings = <&kp LG(A)>;
            key-positions = <13 14>;
            layers = <0>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <25 26>;
            layers = <0>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <26 27>;
            layers = <0>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <27 28>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q        &kp W       &kp F       &kp P         &kp B      &kp J      &kp L            &kp U         &kp Y       &kp SINGLE_QUOTE  &none
&none  &mt LCTRL A  &mt LALT R  &mt LGUI S  &mt LSHIFT T  &kp G      &kp M      &mt RSHIFT N     &mt RGUI E    &mt RALT I  &mt RCTRL O       &none
&none  &kp Z        &kp X       &kp C       &kp D         &kp V      &kp K      &kp H            &kp COMMA     &kp DOT     &kp SEMI          &none
                                &lt 1 ESC   &lt 2 SPACE   &kp TAB    &kp ENTER  &lt 3 BACKSPACE  &lt 4 DELETE
            >;
        };

        nav {
            bindings = <
&none  &kp LG(LS(N4))  &kp LG(LS(N5))  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE              &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &none          &none
&none  &sk RCTRL       &sk LALT        &sk LGUI           &sk LSHIFT       &sk LS(LA(LC(LGUI)))    &kp LEFT        &kp DOWN        &kp UP        &kp RIGHT        &kp LC(UP)     &none
&none  &kp LC(LEFT)    &kp LC(RIGHT)   &kp C_PREVIOUS     &kp C_NEXT       &kp C_PLAY_PAUSE        &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &kp LG(SPACE)  &none
                                       &none              &trans           &trans                  &mkp LCLK       &mkp RCLK       &mkp MCLK
            >;
        };

        num {
            bindings = <
&none  &none      &none     &none     &none      &none                   &kp PLUS   &kp N7   &kp N8  &kp N9  &kp ASTERISK  &none
&none  &sk LCTRL  &sk LALT  &sk LGUI  &sk LSHFT  &sk LS(LA(LC(LGUI)))    &kp MINUS  &kp N4   &kp N5  &kp N6  &kp FSLH      &none
&none  &none      &none     &none     &none      &none                   &kp COMMA  &kp N1   &kp N2  &kp N3  &kp PERCENT   &none
                            &trans    &none      &trans                  &kp EQUAL  &kp DOT  &kp N0
            >;
        };

        sym {
            bindings = <
&none  &kp LESS_THAN  &kp LEFT_BRACE  &kp LBKT         &kp LEFT_PARENTHESIS  &kp GRAVE      &kp TILDE             &kp RIGHT_PARENTHESIS  &kp RBKT  &kp RIGHT_BRACE  &kp GREATER_THAN  &none
&none  &kp AMPERSAND  &kp PIPE        &kp EXCLAMATION  &kp QUESTION          &kp COLON      &sk RS(RA(RC(RGUI)))  &sk RSHFT              &sk RGUI  &sk RALT         &sk RCTRL         &none
&none  &kp PLUS       &kp MINUS       &kp ASTERISK     &kp FSLH              &kp PERCENT    &kp DOLLAR            &kp UNDER              &kp AT    &kp HASH         &kp BSLH          &none
                                      &trans           &trans                &trans         &trans                &none                  &trans
            >;
        };

        sys {
            bindings = <
&none  &kp LC(LG(Q))  &none  &none   &none   &none     &none                 &none         &none         &none         &none         &none
&none  &kp CAPS       &none  &none   &none   &none     &sk RS(RA(RC(RGUI)))  &sk RSHFT     &sk RGUI      &sk RALT      &sk RCTRL     &none
&none  &none          &none  &none   &none   &none     &bt BT_CLR            &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &none
                             &trans  &trans  &trans    &trans                &trans        &none
            >;
        };
    };
};
