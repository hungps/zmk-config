/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q  &kp W  &kp F      &kp P        &kp B             &kp J    &kp L            &kp U         &kp Y    &kp SINGLE_QUOTE  &none
&none  &kp A  &kp R  &kp S      &kp T        &kp G             &kp M    &kp N            &kp E         &kp I    &kp O             &none
&none  &kp Z  &kp X  &kp C      &kp D        &kp V             &kp K    &kp H            &kp COMMA     &kp DOT  &kp SEMI          &none
                     &lt 1 ESC  &lt 2 SPACE  &mt LSHIFT TAB    &kp RET  &lt 3 BACKSPACE  &lt 0 DELETE
            >;
        };

        nav {
            bindings = <
&trans  &kp LG(LS(N4))  &kp LG(LS(N5))  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans                      &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END          &none          &trans
&trans  &sk RCTRL       &sk LALT        &sk LGUI           &sk LSHIFT       &sk LS(LA(LC(LEFT_GUI)))    &kp LEFT        &kp DOWN        &kp UP        &kp RIGHT        &kp LC(UP)     &trans
&trans  &kp LC(LEFT)    &kp LC(RIGHT)   &kp C_PREVIOUS     &kp C_NEXT       &kp C_PLAY_PAUSE            &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &kp LG(SPACE)  &trans
                                        &trans             &trans           &trans                      &mkp LCLK       &mkp RCLK       &mkp MCLK
            >;
        };

        num {
            bindings = <
&trans  &none      &none     &none     &none      &none                       &kp LS(PLUS)  &kp N7   &kp N8  &kp N9  &kp LS(STAR)   &trans
&trans  &sk LCTRL  &sk LALT  &sk LGUI  &sk LSHFT  &sk LS(LA(LC(LEFT_GUI)))    &kp MINUS     &kp N4   &kp N5  &kp N6  &kp FSLH       &trans
&trans  &none      &none     &none     &none      &none                       &kp COMMA     &kp N1   &kp N2  &kp N3  &kp LS(PRCNT)  &trans
                             &trans    &trans     &trans                      &kp EQUAL     &kp DOT  &kp N0
            >;
        };

        sym {
            bindings = <
&trans  &kp LS(LT)    &kp LS(LBRC)  &kp LBKT      &kp LS(LPAR)   &kp GRAVE        &kp LS(TILDE)         &kp LS(RPAR)   &kp RBKT    &kp LS(RBRC)   &kp LS(GT)  &trans
&trans  &kp LS(AMPS)  &kp LS(PIPE)  &kp LS(EXCL)  &kp LS(QMARK)  &kp LS(COLON)    &sk RS(RA(RC(RGUI)))  &sk RSHFT      &sk RGUI    &sk RALT       &sk RCTRL   &trans
&trans  &kp LS(PLUS)  &kp MINUS     &kp LS(STAR)  &kp FSLH       &kp LS(PRCNT)    &kp LS(DLLR)          &kp LS(UNDER)  &kp LS(AT)  &kp LS(POUND)  &kp BSLH    &trans
                                    &trans        &trans         &trans           &trans                &trans         &trans
            >;
        };

        sys {
            bindings = <
&trans  &kp K_SLEEP  &none  &none   &none   &none     &none                 &none      &none     &none     &none      &trans
&trans  &kp CAPS     &none  &none   &none   &none     &sk RS(RA(RC(RGUI)))  &sk RSHFT  &sk RGUI  &sk RALT  &sk RCTRL  &trans
&trans  &none        &none  &none   &none   &none     &none                 &none      &none     &none     &none      &trans
                            &trans  &trans  &trans    &trans                &trans     &trans
            >;
        };
    };
};
